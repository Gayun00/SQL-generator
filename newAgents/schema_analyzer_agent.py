"""
Schema Analyzer Agent - RAGÏôÄ LLMÏùÑ Í≤∞Ìï©Ìïú Ïä§ÌÇ§Îßà Ï†ïÎ≥¥ Í≤ÄÏÉâ, Î∂ÑÏÑù Î∞è Î∂àÌôïÏã§ÏÑ± Ï†ïÏùò
"""

from typing import Dict, Any, List, Optional
import json
import logging
import re

from rag.schema_retriever import schema_retriever
from langchain_openai import ChatOpenAI
from langchain.schema import HumanMessage, SystemMessage

# Î°úÍπÖ ÏÑ§Ï†ï
logger = logging.getLogger(__name__)

class SchemaAnalyzerAgent:
    """RAGÏôÄ LLMÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Í¥ÄÎ†® Ïä§ÌÇ§ÎßàÎ•º Î∂ÑÏÑùÌïòÍ≥† Î∂àÌôïÏã§ÏÑ±ÏùÑ Ï†ïÏùòÌïòÎäî ÏóêÏù¥Ï†ÑÌä∏"""
    
    def __init__(self, similarity_threshold: float = 0.3, max_tables: int = 7, model_name: str = "gpt-4-turbo"):
        print("üîç SchemaAnalyzer Agent Ï¥àÍ∏∞Ìôî")
        self.similarity_threshold = similarity_threshold
        self.max_tables = max_tables
        self.schema_retriever = schema_retriever
        self._initialized = False
        self.llm = ChatOpenAI(model=model_name, temperature=0.1)
    
    async def analyze_query(self, user_query: str) -> Dict[str, Any]:
        """
        ÏÇ¨Ïö©Ïûê ÏøºÎ¶¨Î•º Î∂ÑÏÑùÌïòÏó¨ Í¥ÄÎ†® Ïä§ÌÇ§Îßà Ï†ïÎ≥¥ Í≤ÄÏÉâ Î∞è Î∂àÌôïÏã§ÏÑ± Ï†ïÏùò
        """
        try:
            print(f"üîç Ïä§ÌÇ§Îßà Î∂ÑÏÑù ÏãúÏûë: {user_query}")
            
            if not self._initialized:
                if not await self._initialize_retriever():
                    return {"success": False, "error": "Schema Retriever Ï¥àÍ∏∞Ìôî Ïã§Ìå®"}
            
            relevant_tables = self._search_relevant_schemas(user_query)
            
            if not relevant_tables:
                print("‚ö†Ô∏è Í¥ÄÎ†® Ïä§ÌÇ§Îßà Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return {"success": True, "schema_info": [], "message": "Í¥ÄÎ†® Ïä§ÌÇ§Îßà Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."}
            
            analysis_result = await self._perform_relevance_and_uncertainty_analysis(user_query, relevant_tables)
            
            if analysis_result.get("has_sufficient_info", True):
                print(f"‚úÖ Ïä§ÌÇ§Îßà Î∂ÑÏÑù ÏôÑÎ£å: {len(analysis_result.get('schema_info', []))}Í∞ú ÌÖåÏù¥Î∏î")
            else:
                print(f"‚ö†Ô∏è Ï†ïÎ≥¥ Î∂àÏ∂©Î∂Ñ: {len(analysis_result.get('uncertainties', []))}Í∞ú Î∂àÌôïÏã§ÏÑ± Î∞úÍ≤¨")

            return analysis_result
            
        except Exception as e:
            error_msg = f"Ïä§ÌÇ§Îßà Î∂ÑÏÑù Ï§ë Ïò§Î•ò: {str(e)}"
            print(f"‚ùå {error_msg}")
            logger.error(error_msg, exc_info=True)
            return {"success": False, "error": error_msg}

    async def _perform_relevance_and_uncertainty_analysis(self, user_query: str, tables: List[Dict[str, Any]]) -> Dict[str, Any]:
        """LLMÏùÑ Ïù¥Ïö©Ìïú Í¥ÄÎ†®ÏÑ±, ÏùòÎèÑ, Î∂àÌôïÏã§ÏÑ± Ïã¨Ï∏µ Î∂ÑÏÑù"""
        
        schema_info_str = self._format_schema_info_for_llm(tables)
        
        system_prompt = f"""
        ÎãπÏã†ÏùÄ ÏûêÏó∞Ïñ¥ ÏøºÎ¶¨ÏôÄ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§ÎßàÎ•º Î∂ÑÏÑùÌïòÏó¨ SQL ÏÉùÏÑ± Ïª®ÌÖçÏä§Ìä∏Î•º ÎßåÎìúÎäî Ï†ÑÎ¨∏ AI AgentÏûÖÎãàÎã§.

        **Î∂ÑÏÑù ÌîÑÎ°úÏÑ∏Ïä§:**
        1. **ÏøºÎ¶¨ ÏùòÎèÑ Î∞è ÌïÑÌÑ∞ Î∂ÑÏÑù**: ÏÇ¨Ïö©ÏûêÏùò ÏöîÏ≤≠(Intent)Í≥º ÌïÑÌÑ∞ÎßÅ Ï°∞Í±¥(Filters)ÏùÑ Î™ÖÌôïÌûà Î∂ÑÏÑùÌï©ÎãàÎã§.
        2. **Ïä§ÌÇ§Îßà Í¥ÄÎ†®ÏÑ± ÌèâÍ∞Ä**: Ï†úÍ≥µÎêú Ïä§ÌÇ§Îßà Ï†ïÎ≥¥ Ï§ë ÏÇ¨Ïö©ÏûêÏùò ÏùòÎèÑÏôÄ ÏßÅÏ†ëÏ†ÅÏúºÎ°ú Í¥ÄÎ†®Îêú ÌÖåÏù¥Î∏îÍ≥º Ïª¨ÎüºÏùÑ ÏãùÎ≥ÑÌï©ÎãàÎã§.
        3. **Ï†ïÎ≥¥ Ï∂©Î∂ÑÏÑ± ÌåêÎã®**: Î∂ÑÏÑùÎêú ÎÇ¥Ïö©ÏùÑ Î∞îÌÉïÏúºÎ°ú, SQL ÏøºÎ¶¨Î•º **Ïò§Î•ò ÏóÜÏù¥ Ï†ïÌôïÌïòÍ≤å** ÏÉùÏÑ±ÌïòÍ∏∞Ïóê Ï†ïÎ≥¥Í∞Ä Ï∂©Î∂ÑÌïúÏßÄ ÌåêÎã®Ìï©ÎãàÎã§.
        4. **Î∂àÌôïÏã§ÏÑ± Ï†ïÏùò**: Ï†ïÎ≥¥Í∞Ä Î∂àÏ∂©Î∂ÑÌïòÎã§Í≥† ÌåêÎã®ÎêòÎ©¥, Î¨¥ÏóáÏù¥ Î™®Ìò∏ÌïòÍ≥† Ïñ¥Îñ§ Ï†ïÎ≥¥Í∞Ä Îçî ÌïÑÏöîÌïúÏßÄ `uncertainties` Î™©Î°ùÏúºÎ°ú Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Ï†ïÏùòÌï©ÎãàÎã§. Í∞Å Î∂àÌôïÏã§ÏÑ±ÏùÄ `DataExplorerAgent`Í∞Ä Ìï¥Í≤∞Ìï† Ïàò ÏûàÎäî Íµ¨Ï≤¥Ï†ÅÏù∏ ÏßàÎ¨∏ ÌòïÌÉúÏó¨Ïïº Ìï©ÎãàÎã§.

        **ÏÇ¨Ïö©Ïûê ÏøºÎ¶¨:** {user_query}

        **RAGÎ°ú Ï∂îÏ∂úÎêú Ïä§ÌÇ§Îßà Ï†ïÎ≥¥:**
        {schema_info_str}

        **ÏùëÎãµ ÌòïÏãù (JSON):**
        - Î∞òÎìúÏãú ÏïÑÎûòÏùò JSON ÌòïÏãùÎßåÏúºÎ°ú ÏùëÎãµÌï¥Ïïº Ìï©ÎãàÎã§. Îã§Î•∏ ÏÑ§Î™ÖÏùÄ Ï†àÎåÄ Ìè¨Ìï®ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
        - Ï†ïÎ≥¥Í∞Ä Ï∂©Î∂ÑÌïòÎ©¥ `has_sufficient_info`Î•º `true`Î°ú, Î∂àÏ∂©Î∂ÑÌïòÎ©¥ `false`Î°ú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.
        - `has_sufficient_info`Í∞Ä `false`Ïùº Í≤ΩÏö∞ÏóêÎßå `uncertainties` ÌïÑÎìúÎ•º Ï±ÑÏõåÏ£ºÏÑ∏Ïöî.

        ```json
        {{
            "success": true,
            "has_sufficient_info": true,
            "uncertainties": [
                {{
                    "type": "column_value_check",
                    "description": "users ÌÖåÏù¥Î∏îÏùò status Ïª¨ÎüºÏóê Ïñ¥Îñ§ Í∞íÎì§Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏Ìï¥Ïïº Ìï©ÎãàÎã§.",
                    "target_table": "users",
                    "target_column": "status"
                }},
                {{
                    "type": "data_format_check",
                    "description": "orders ÌÖåÏù¥Î∏îÏùò order_date Ïª¨ÎüºÏùò ÎÇ†Ïßú ÌòïÏãùÏù¥ 'YYYY-MM-DD'Ïù∏ÏßÄ ÌôïÏù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.",
                    "target_table": "orders",
                    "target_column": "order_date"
                }}
            ],
            "query_analysis": {{
                "user_query": "{user_query}",
                "intent": "ÏÇ¨Ïö©Ïûê ÏùòÎèÑ(Ïòà: COUNT, SUM, SELECT)",
                "filters": [
                    {{"type": "date_range", "period": "last_7_days", "column": "Ï†ÅÏö©Ìï† ÎÇ†Ïßú Ïª¨ÎüºÎ™Ö"}}
                ],
                "natural_language_description": "LLMÏù¥ Ïù¥Ìï¥Ìïú ÏÇ¨Ïö©ÏûêÏùò ÏöîÏ≤≠ ÎÇ¥Ïö© ÏöîÏïΩ"
            }},
            "schema_info": [
                {{
                    "table_name": "Í¥ÄÎ†® ÌÖåÏù¥Î∏îÎ™Ö",
                    "description": "ÌÖåÏù¥Î∏î ÏÑ§Î™Ö",
                    "relevant_columns": [
                        {{"name": "Í¥ÄÎ†® Ïª¨ÎüºÎ™Ö1", "type": "Îç∞Ïù¥ÌÑ∞ÌÉÄÏûÖ", "description": "Ïª¨Îüº ÏÑ§Î™Ö"}}
                    ]
                }}
            ],
            "message": "Î∂ÑÏÑù ÏöîÏïΩ Î©îÏãúÏßÄ"
        }}
        ```
        """
        
        try:
            response = await self.llm.ainvoke([SystemMessage(content=system_prompt)])
            parsed_response = self._parse_json_response(response.content)
            
            if not parsed_response or not parsed_response.get("success"):
                return self._create_fallback_response(tables)
            
            return parsed_response

        except Exception as e:
            logger.error(f"LLM Í¥ÄÎ†®ÏÑ± Î∂ÑÏÑù Ïã§Ìå®: {str(e)}", exc_info=True)
            return self._create_fallback_response(tables)

    def _format_schema_info_for_llm(self, tables: List[Dict[str, Any]]) -> str:
        formatted_info = []
        for i, table in enumerate(tables, 1):
            table_name = table.get("table_name", f"table_{i}")
            description = table.get("description", "")
            columns = table.get("columns", [])
            
            schema_text = f"{i}. ÌÖåÏù¥Î∏î: {table_name}\n   ÏÑ§Î™Ö: {description}\n   Ïª¨Îüº:\n"
            for col in columns:
                field_text = f"     - {col.get('name')} ({col.get('type')}): {col.get('description')}"
                schema_text += field_text + "\n"
            formatted_info.append(schema_text)
        return "\n".join(formatted_info)

    def _parse_json_response(self, response_content: str) -> Optional[Dict]:
        try:
            match = re.search(r"```json\n(.*?)\n```", response_content, re.DOTALL)
            if match:
                content = match.group(1)
            else:
                content = response_content
            return json.loads(content.strip())
        except json.JSONDecodeError as e:
            logger.warning(f"JSON ÌååÏã± Ïã§Ìå®: {str(e)}\nÏõêÎ≥∏ ÎÇ¥Ïö©: {response_content[:200]}...")
            return None

    def _create_fallback_response(self, tables: List[Dict[str, Any]]) -> Dict[str, Any]:
        print("‚ö†Ô∏è LLM Î∂ÑÏÑù Ïã§Ìå®. RAG Í≤ÄÏÉâ Í≤∞Í≥ºÎ°ú ÎåÄÏ≤¥Ìï©ÎãàÎã§.")
        return {
            "success": True,
            "has_sufficient_info": True, # LLM Ïã§Ìå®Ïãú ÏùºÎã® Ï∂©Î∂ÑÌïú Í≤ÉÏúºÎ°ú Í∞ÑÏ£º
            "schema_info": self._process_schema_info(tables),
            "message": "LLM Î∂ÑÏÑùÏóê Ïã§Ìå®ÌïòÏó¨, Í≤ÄÏÉâÎêú Ïä§ÌÇ§Îßà Ï†ïÎ≥¥Î•º Í∏∞Î∞òÏúºÎ°ú Í≤∞Í≥ºÎ•º Ï†úÍ≥µÌï©ÎãàÎã§."
        }

    async def _initialize_retriever(self) -> bool:
        try:
            print("üöÄ Schema Retriever Ï¥àÍ∏∞Ìôî Ï§ë...")
            if self.schema_retriever.initialize():
                self._initialized = True
                print("‚úÖ Schema Retriever Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
                return True
            return False
        except Exception as e:
            print(f"‚ùå Schema Retriever Ï¥àÍ∏∞Ìôî Ïò§Î•ò: {str(e)}")
            return False
    
    def _search_relevant_schemas(self, user_query: str) -> List[Dict]:
        try:
            return self.schema_retriever.get_relevant_tables_with_threshold(
                query=user_query,
                top_k=self.max_tables,
                similarity_threshold=self.similarity_threshold
            )
        except Exception as e:
            print(f"‚ùå Ïä§ÌÇ§Îßà Í≤ÄÏÉâ Ï§ë Ïò§Î•ò: {str(e)}")
            return []
    
    def _process_schema_info(self, schema_info: List[Dict]) -> List[Dict]:
        processed_schemas = []
        for table_info in schema_info:
            processed_table = {
                "table_name": table_info.get("table_name", ""),
                "description": table_info.get("description", ""),
                "columns": table_info.get("columns", [])
            }
            processed_schemas.append(processed_table)
        return processed_schemas

# Ï†ÑÏó≠ SchemaAnalyzer Ïù∏Ïä§ÌÑ¥Ïä§
schema_analyzer_agent = SchemaAnalyzerAgent()
